[
    {
        "id": "157c96309b27bb6f",
        "type": "tab",
        "label": "Save/Download CSV",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cb64fefaeaf4fccf",
        "type": "group",
        "z": "157c96309b27bb6f",
        "name": "Flow to add mac address to dropdown dashboard",
        "style": {
            "stroke": "none",
            "label": true,
            "fill": "#d1d1d1",
            "fill-opacity": "0.54"
        },
        "nodes": [
            "31cfad17d7507b14",
            "34ef0528845d9ed3",
            "3a48530686a016bc",
            "6f635196e3c2c74e"
        ],
        "x": 674,
        "y": 519,
        "w": 792,
        "h": 82
    },
    {
        "id": "a95ce519fec67eef",
        "type": "group",
        "z": "157c96309b27bb6f",
        "name": "Flow to download CSV file from dashboard",
        "style": {
            "stroke": "none",
            "fill": "#bfdbef",
            "fill-opacity": "0.52",
            "label": true
        },
        "nodes": [
            "4f688d06315c27a1",
            "e9642a6288459352",
            "a53125d063cddea5",
            "1be999659aca3267",
            "d2d6299e6f6f12a5",
            "53619bd02f214a0b",
            "cc2f84d16ffb6345",
            "39ec28475d6ad592",
            "75f0c58fe39c2518",
            "dd0e9b274b3597a6",
            "e4f2eb0c2e88e64b",
            "965a64939e1c16cf",
            "19407720176e9479",
            "db53bf0f501f6c41",
            "2b9e1727e1e499e6",
            "73db835a58f26391",
            "ff2627ecc904e08d",
            "93344b6c08db0b58",
            "2399210f910b0828",
            "a099da0aa41a351c",
            "f8ce2aaf74beccd5",
            "be9586c054ed763b",
            "cd18e0aa72dc9fa3",
            "e227e02076042db5"
        ],
        "x": 674,
        "y": 679,
        "w": 932,
        "h": 382
    },
    {
        "id": "ceb2b9c3d8cb8277",
        "type": "group",
        "z": "157c96309b27bb6f",
        "name": "This flow saves CSV files.",
        "style": {
            "stroke": "none",
            "fill": "#ffefbf",
            "fill-opacity": "0.41",
            "label": true
        },
        "nodes": [
            "2006100fb098e59f",
            "826dbdfed4e6dd30",
            "dcdb633910b4489d",
            "f15036bc00ac9afc",
            "ee9788a4596e1a82"
        ],
        "x": 674,
        "y": 359,
        "w": 952,
        "h": 82
    },
    {
        "id": "dd5a7366edd7124a",
        "type": "group",
        "z": "157c96309b27bb6f",
        "name": "Flow to delete local file after download",
        "style": {
            "stroke": "none",
            "fill": "#bfdbef",
            "fill-opacity": "0.52",
            "label": true
        },
        "nodes": [
            "7ea1c4f13a1d8b7f",
            "5c071e7f8c658924",
            "a4f3373081b9e7e6",
            "5ca04232369bb2b3",
            "701ad51a75fd5047",
            "f355936bd828aaee"
        ],
        "x": 1654,
        "y": 719,
        "w": 672,
        "h": 122
    },
    {
        "id": "e227e02076042db5",
        "type": "junction",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "x": 1260,
        "y": 780,
        "wires": [
            [
                "7ea1c4f13a1d8b7f"
            ]
        ]
    },
    {
        "id": "2006100fb098e59f",
        "type": "file",
        "z": "157c96309b27bb6f",
        "g": "ceb2b9c3d8cb8277",
        "name": "write-file-locally",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1340,
        "y": 400,
        "wires": [
            [
                "826dbdfed4e6dd30"
            ]
        ]
    },
    {
        "id": "826dbdfed4e6dd30",
        "type": "debug",
        "z": "157c96309b27bb6f",
        "g": "ceb2b9c3d8cb8277",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 400,
        "wires": []
    },
    {
        "id": "f72d3f7317e1878a",
        "type": "debug",
        "z": "157c96309b27bb6f",
        "name": "All messages",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 260,
        "wires": []
    },
    {
        "id": "7f92878466352a2f",
        "type": "switch",
        "z": "157c96309b27bb6f",
        "name": "filter-by-sensor-data",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor_data",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 400,
        "wires": [
            [
                "f15036bc00ac9afc",
                "3a48530686a016bc"
            ]
        ]
    },
    {
        "id": "dcdb633910b4489d",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "ceb2b9c3d8cb8277",
        "name": "format-sensor-data",
        "func": "// Extract the payload from the incoming message\nconst payload = msg.payload;\n\n// 1. Prepare the data for the CSV row\n// ------------------------------------\n\n// Define the common fields that will be in every CSV file\nconst commonData = {\n    time: msg.time, \n    firmware: payload.firmware,\n    count: payload.counter,\n    battery: payload.battery_percent,\n    rssi: payload.rssi || '-'\n};\n\n// Get the sensor-specific data\nconst sensorData = payload.sensor_data;\nconst device = msg.addr;\n\n// Combine the common data and the sensor-specific data into a single, flat object.\n// The order of columns will be: commonData keys, then sensorData keys.\nconst flatData = { ...commonData, ...sensorData };\n\n\n// 2. Generate the CSV header and data row strings\n// ------------------------------------------------\n\n// The header is the list of keys from our flat data object\nconst headers = Object.keys(flatData);\n// The data row is the list of values.\nconst values = Object.values(flatData);\n\n// Convert arrays into comma-separated strings\nconst headerString = headers.join(',');\nconst rowString = values.join(',');\n\n\n// 3. Handle writing the header only once per file\n// -----------------------------------------------\n// We use flow context to remember if we've already written the header for a specific sensor type.\nconst contextKey = `header_written_${device}`;\nconst headerWritten = flow.get(contextKey) || false;\n\nlet csvPayload = \"\";\n\nif (!headerWritten) {\n    // If the header hasn't been written yet, combine the header and the first row.\n    // The '\\n' creates a new line between the header and the data.\n    csvPayload = headerString + '\\n' + rowString;\n    // Save the state to the flow context so we don't write the header again.\n    flow.set(contextKey, true);\n    \n    //node.log(`Writing new file with header for sensor_type: ${sensorType}`);\n} else {\n    // If the header has already been written, the payload is just the new data row.\n    csvPayload = rowString;\n}\n\n// 4. Prepare the message for the 'file' node\n// --------------------------------------------\n// The 'file' node uses msg.payload as the content\nmsg.payload = csvPayload;\n\n// Pass the message to the next node in the flow (the 'file' node)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "2006100fb098e59f"
            ]
        ]
    },
    {
        "id": "36df571e9b3fa8ed",
        "type": "ncd-gateway-node",
        "z": "157c96309b27bb6f",
        "name": "",
        "connection": "",
        "unknown_devices": 0,
        "outputs": 1,
        "x": 170,
        "y": 400,
        "wires": [
            [
                "f72d3f7317e1878a",
                "7f92878466352a2f"
            ]
        ]
    },
    {
        "id": "f15036bc00ac9afc",
        "type": "change",
        "z": "157c96309b27bb6f",
        "g": "ceb2b9c3d8cb8277",
        "name": "build-payload",
        "rules": [
            {
                "t": "set",
                "p": "addr",
                "pt": "msg",
                "to": "payload.addr",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "addr",
                "pt": "msg",
                "to": "$substring(addr,12)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "date",
                "pt": "msg",
                "to": "$moment(data.received).format(\"YYYY-MM-DD\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "time",
                "pt": "msg",
                "to": "$moment(data.received).format(\"HH:mm:ss\")",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "payload.original",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "ee9788a4596e1a82"
            ]
        ]
    },
    {
        "id": "5b4a12ef706f4359",
        "type": "change",
        "z": "157c96309b27bb6f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "userpath",
                "pt": "flow",
                "to": "path",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4f688d06315c27a1",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "build-local-path",
        "func": "var date = flow.get('date') || 0;\nvar basePath = flow.get('userpath');\nvar device = msg.device;\nmsg.filename = basePath + \"/\" + device + \"/\" + date + \"/\" + date + \"_\" + device + \".csv\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 840,
        "wires": [
            [
                "a53125d063cddea5",
                "e227e02076042db5"
            ]
        ]
    },
    {
        "id": "e9642a6288459352",
        "type": "http response",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1490,
        "y": 840,
        "wires": []
    },
    {
        "id": "a53125d063cddea5",
        "type": "file in",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "read-file-from-local",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1330,
        "y": 840,
        "wires": [
            [
                "e9642a6288459352"
            ]
        ]
    },
    {
        "id": "1be999659aca3267",
        "type": "catch",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "",
        "scope": [
            "a53125d063cddea5"
        ],
        "uncaught": false,
        "x": 970,
        "y": 920,
        "wires": [
            [
                "39ec28475d6ad592",
                "dd0e9b274b3597a6"
            ]
        ]
    },
    {
        "id": "d2d6299e6f6f12a5",
        "type": "http in",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "",
        "url": "/csv/:fn",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 770,
        "y": 840,
        "wires": [
            [
                "53619bd02f214a0b"
            ]
        ]
    },
    {
        "id": "53619bd02f214a0b",
        "type": "change",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "fomat-addr",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "msg",
                "to": "macSelection",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 840,
        "wires": [
            [
                "4f688d06315c27a1"
            ]
        ]
    },
    {
        "id": "cc2f84d16ffb6345",
        "type": "ui-notification",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "ui": "eb4502250af82431",
        "position": "top left",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "15",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "",
        "raw": false,
        "className": "",
        "name": "show-notifications",
        "x": 1380,
        "y": 900,
        "wires": []
    },
    {
        "id": "39ec28475d6ad592",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "error message",
        "func": "var error = \"Error: no such file or directory\";\nmsg = {};\nmsg.payload = error;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 900,
        "wires": [
            [
                "75f0c58fe39c2518"
            ]
        ]
    },
    {
        "id": "75f0c58fe39c2518",
        "type": "trigger",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "pay",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1255,
        "y": 900,
        "wires": [
            [
                "cc2f84d16ffb6345"
            ]
        ],
        "l": false
    },
    {
        "id": "dd0e9b274b3597a6",
        "type": "http response",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "Redirecting",
        "statusCode": "302",
        "headers": {
            "location": "/dashboard/download_csv"
        },
        "x": 1130,
        "y": 940,
        "wires": []
    },
    {
        "id": "e4f2eb0c2e88e64b",
        "type": "ui-text-input",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "group": "c9733dde78cc1406",
        "name": "date-picker",
        "label": "Select Date:",
        "order": 3,
        "width": "0",
        "height": "0",
        "topic": "topic",
        "topicType": "msg",
        "mode": "date",
        "tooltip": "",
        "delay": "30",
        "passthru": false,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 770,
        "y": 740,
        "wires": [
            [
                "19407720176e9479"
            ]
        ]
    },
    {
        "id": "965a64939e1c16cf",
        "type": "ui-template",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "group": "c9733dde78cc1406",
        "page": "",
        "ui": "",
        "name": "download-button",
        "order": 4,
        "width": "2",
        "height": "1",
        "head": "",
        "format": "<template>  \n    <a :href=\"`${msg.payload}`\" class=\"download\">\n        <v-btn>Download CSV</v-btn>\n    </a>\n</template>\n<style>\n.download .v-btn {\n    width: 100%;\n}\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1490,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "31cfad17d7507b14",
        "type": "ui-dropdown",
        "z": "157c96309b27bb6f",
        "g": "cb64fefaeaf4fccf",
        "group": "c9733dde78cc1406",
        "name": "dropdown-address",
        "label": "Select Device",
        "tooltip": "",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 1190,
        "y": 560,
        "wires": [
            [
                "6f635196e3c2c74e",
                "2b9e1727e1e499e6"
            ]
        ]
    },
    {
        "id": "34ef0528845d9ed3",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "cb64fefaeaf4fccf",
        "name": "populate-options",
        "func": "/**\n * Node-RED function to populate msg.options with an array of stored MAC addresses.\n * Retrieves MAC addresses from a single flow storage key ('macAddresses').\n * \n * @param {Object} msg - Node-RED message object with mac_counter property\n * @returns {Object} msg - Updated message with options array containing MAC addresses\n */\n\n// Retrieve MAC addresses from flow storage\nconst macAddresses = flow.get('macAddresses') || [];\n\n// Ensure mac_counter does not exceed stored array length\nconst count = Math.min(msg.mac_counter, macAddresses.length);\n\n// Populate options array\nmsg.options = macAddresses.slice(0, count);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 560,
        "wires": [
            [
                "31cfad17d7507b14"
            ]
        ]
    },
    {
        "id": "3a48530686a016bc",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "cb64fefaeaf4fccf",
        "name": "track-unique-mac",
        "func": "/**\n * Node-RED function to track unique MAC addresses and count occurrences.\n * Stores MAC addresses in a single flow array and maintains a counter.\n * Returns msg with mac_counter and newdevice properties.\n * \n * @param {Object} msg - Node-RED message object with payload.addr (MAC address)\n * @returns {Object} msg - Updated message with mac_counter and newdevice\n */\n\n// Configuration\nconst MAX_MAC_ADDRESSES = 128; // Prevent unbounded growth\n\n// Normalize MAC address (e.g., lowercase for consistent comparison)\nlet newMAC = msg.payload.addr.substring(12)\n\n// Initialize flow storage for MAC addresses and counter\nlet macAddresses = flow.get('macAddresses') || [];\nlet count = flow.get('macCount') || 0;\n\n// Check if MAC address already exists\nconst isExistingMAC = macAddresses.includes(newMAC);\n\nif (isExistingMAC) {\n    // MAC address already exists\n    msg.mac_counter = count;\n    msg.new_device = false;\n} else {\n    // New MAC address\n    if (count >= MAX_MAC_ADDRESSES) {\n        msg.mac_counter = count;\n        msg.newdevice = false;\n    } else {\n        macAddresses.push(newMAC);\n        count++;\n        flow.set('macAddresses', macAddresses);\n        flow.set('macCount', count);\n        msg.mac_counter = count;\n        msg.new_device = true;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 560,
        "wires": [
            [
                "34ef0528845d9ed3"
            ]
        ]
    },
    {
        "id": "6f635196e3c2c74e",
        "type": "change",
        "z": "157c96309b27bb6f",
        "g": "cb64fefaeaf4fccf",
        "name": "save-slection",
        "rules": [
            {
                "t": "set",
                "p": "macSelection",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "7ea1c4f13a1d8b7f",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "dd5a7366edd7124a",
        "name": "delete-local-file",
        "func": "let path = msg.filename;\nlet device = msg.device;\nlet contextKey = `header_written_${device}`;\nmsg.payload = 'rm -r ' + path;\nflow.set(contextKey, false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 780,
        "wires": [
            [
                "5c071e7f8c658924"
            ]
        ]
    },
    {
        "id": "5c071e7f8c658924",
        "type": "exec",
        "z": "157c96309b27bb6f",
        "g": "dd5a7366edd7124a",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1910,
        "y": 780,
        "wires": [
            [
                "a4f3373081b9e7e6"
            ],
            [
                "a4f3373081b9e7e6"
            ],
            [
                "5ca04232369bb2b3",
                "a4f3373081b9e7e6"
            ]
        ]
    },
    {
        "id": "a4f3373081b9e7e6",
        "type": "debug",
        "z": "157c96309b27bb6f",
        "g": "dd5a7366edd7124a",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 760,
        "wires": []
    },
    {
        "id": "19407720176e9479",
        "type": "switch",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "verify",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 740,
        "wires": [
            [
                "db53bf0f501f6c41"
            ]
        ]
    },
    {
        "id": "db53bf0f501f6c41",
        "type": "change",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "set-date-download",
        "rules": [
            {
                "t": "set",
                "p": "date",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 740,
        "wires": [
            [
                "2b9e1727e1e499e6"
            ]
        ]
    },
    {
        "id": "2b9e1727e1e499e6",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "get-mac-selection",
        "func": "let mac = flow.get('macSelection') || '';\nlet date = flow.get('date') || '';\nmsg = {};\nmsg.payload = \"/csv/\" + date + \"_\" + mac + \".csv\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 720,
        "wires": [
            [
                "965a64939e1c16cf"
            ]
        ]
    },
    {
        "id": "5ca04232369bb2b3",
        "type": "switch",
        "z": "157c96309b27bb6f",
        "g": "dd5a7366edd7124a",
        "name": "check",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2050,
        "y": 800,
        "wires": [
            [
                "701ad51a75fd5047"
            ]
        ]
    },
    {
        "id": "701ad51a75fd5047",
        "type": "change",
        "z": "157c96309b27bb6f",
        "g": "dd5a7366edd7124a",
        "name": "message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "File deleted locally",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2180,
        "y": 800,
        "wires": [
            [
                "f355936bd828aaee"
            ]
        ]
    },
    {
        "id": "f355936bd828aaee",
        "type": "trigger",
        "z": "157c96309b27bb6f",
        "g": "dd5a7366edd7124a",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "pay",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2285,
        "y": 800,
        "wires": [
            [
                "cc2f84d16ffb6345"
            ]
        ],
        "l": false
    },
    {
        "id": "ebb6f04fad4070a7",
        "type": "comment",
        "z": "157c96309b27bb6f",
        "name": "👇Set your /dev/ttymxc2 port here",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "585ba22d5eb90a5b",
        "type": "comment",
        "z": "157c96309b27bb6f",
        "name": "👇Default path: /home/ncdio/.node-red/ncd_log",
        "info": "",
        "x": 860,
        "y": 240,
        "wires": []
    },
    {
        "id": "ff2627ecc904e08d",
        "type": "ui-button",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "group": "c9733dde78cc1406",
        "name": "",
        "label": "Delete CSVs for This Device",
        "order": 5,
        "width": "0",
        "height": "0",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 820,
        "y": 980,
        "wires": [
            [
                "93344b6c08db0b58"
            ]
        ]
    },
    {
        "id": "93344b6c08db0b58",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "build cmd",
        "func": "let date = flow.get('date') || null;\nlet device = flow.get('macSelection') || null;\nlet path = flow.get('userpath') || null;\nif(date != null && device != null && path != null){\n    msg.command = 'rm -r ' + path + \"/\" + device;\n    msg.payload = 'Are you sure you want to delete all local CSV files from the selected device? This action cannot be undone.';\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 980,
        "wires": [
            [
                "2399210f910b0828"
            ]
        ]
    },
    {
        "id": "2399210f910b0828",
        "type": "ui-notification",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "ui": "eb4502250af82431",
        "position": "top left",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": false,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Cancel",
        "allowConfirm": true,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notif",
        "x": 1210,
        "y": 1000,
        "wires": [
            [
                "be9586c054ed763b"
            ]
        ]
    },
    {
        "id": "a099da0aa41a351c",
        "type": "exec",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1445,
        "y": 1000,
        "wires": [
            [
                "cd18e0aa72dc9fa3"
            ],
            [],
            []
        ],
        "l": false
    },
    {
        "id": "f8ce2aaf74beccd5",
        "type": "ui-button",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "group": "c9733dde78cc1406",
        "name": "",
        "label": "Delete All Files",
        "order": 6,
        "width": "0",
        "height": "0",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 880,
        "y": 1020,
        "wires": [
            [
                "73db835a58f26391"
            ]
        ]
    },
    {
        "id": "73db835a58f26391",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "build cmd",
        "func": "let path = flow.get('userpath') || null;\nif(path != null){\n    msg.command = 'rm -r ' + path;\n    msg.payload = 'Delete all CSV files? This action can not be undone.';\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1020,
        "wires": [
            [
                "2399210f910b0828"
            ]
        ]
    },
    {
        "id": "be9586c054ed763b",
        "type": "switch",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "confirm",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "confirm_clicked",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1340,
        "y": 1000,
        "wires": [
            [
                "a099da0aa41a351c"
            ]
        ]
    },
    {
        "id": "cd18e0aa72dc9fa3",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "a95ce519fec67eef",
        "name": "error",
        "func": "if(msg.rc.code){\n    msg.payload = 'No such file or directory';\n    return msg;\n}else{\n    msg.payload = 'File deleted from local';\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1000,
        "wires": [
            [
                "75f0c58fe39c2518"
            ]
        ]
    },
    {
        "id": "ee9788a4596e1a82",
        "type": "function",
        "z": "157c96309b27bb6f",
        "g": "ceb2b9c3d8cb8277",
        "name": "build-path",
        "func": "var userpath = flow.get('userpath');\nvar address = msg.addr;\nvar date = msg.date;\n\n// CSV local Path\nmsg.path = userpath + \"/\" + address + \"/\" + date + \"/\" + date + \"_\" + address + \".csv\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 400,
        "wires": [
            [
                "dcdb633910b4489d"
            ]
        ]
    },
    {
        "id": "579d3498fc7539be",
        "type": "inject",
        "z": "157c96309b27bb6f",
        "name": "inject",
        "props": [
            {
                "p": "path",
                "v": "/home/ncdio/.node-red/ncd_log",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 750,
        "y": 280,
        "wires": [
            [
                "5b4a12ef706f4359"
            ]
        ]
    },
    {
        "id": "eb4502250af82431",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "c9733dde78cc1406",
        "type": "ui-group",
        "name": "Download",
        "page": "cf58fa4b265306df",
        "width": "2",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "cf58fa4b265306df",
        "type": "ui-page",
        "name": "Data Logging",
        "ui": "eb4502250af82431",
        "path": "/download_csv",
        "icon": "mdi-database",
        "layout": "grid",
        "theme": "07c199eab558353d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "07c199eab558353d",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "5740422f4e4a2b67",
        "type": "global-config",
        "env": [],
        "modules": {
            "@ncd-io/node-red-enterprise-sensors": "1.4.4",
            "@flowfuse/node-red-dashboard": "1.26.0"
        }
    }
]
